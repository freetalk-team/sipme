
#!define DBURL "sqlite:///var/kamailio.db"
#!define IRC_DBURL "sqlite:///var/app.db"

#!define OUTBOUND_PROXY "sip:kamailio:80;transport=tcp"

#!define WS_PORT 80
#!define WSS_PORT 443
#!define UDP_PORT 5060
#!define TCP_PORT 5060

##!define WITH_DEBUG

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7


####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=8

/* add local domain aliases */
alias="ftalk.net"
alias="internal"

listen=tcp:0.0.0.0:WS_PORT
listen=tcp:0.0.0.0:TCP_PORT

#!ifdef WITH_TLS
enable_tls=yes
#!endif

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

tcp_accept_no_cl=yes

####### Modules Section ########
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "uac.so"
loadmodule "avpops.so"
loadmodule "htable.so"
# loadmodule "db_sqlite.so"
loadmodule "db_postgres.so"
loadmodule "json.so"
# loadmodule "pua.so"
#loadmodule "pua_json.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
loadmodule "msilo.so"

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

# #!ifdef WITH_DEBUG
loadmodule "debugger.so"
# #!endif

loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"

loadmodule "irc.so"


# ----------------- setting module-specific parameters ---------------
modparam("uac","restore_mode","none")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
# modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)


# ----- presence params -----
modparam("presence", "db_url", DBURL)
# modparam("presence", "subs_db_mode", 3)
modparam("presence", "timeout_rm_subs", 0)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif


#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

# ----- nathelper params -----
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
# Note: leaving NAT pings turned off here as nathelper is _only_ being used for
#       WebSocket connections.  NAT pings are not needed as WebSockets have
#       their own keep-alives.
modparam("websocket", "keepalive_mechanism", 3)
modparam("websocket", "keepalive_timeout", 30)
modparam("websocket", "keepalive_processes", 3)
modparam("websocket", "keepalive_interval", 1)
modparam("websocket", "ping_application_data", 'Hi there')
modparam("websocket", "sub_protocols", 1)

# ----- irc params -----
modparam("irc", "db_url", IRC_DBURL)
modparam("irc", "rooms_table", "room")
modparam("irc", "members_table", "member")
modparam("irc", "outbound_proxy", OUTBOUND_PROXY)

# ----- msilo params -----
modparam("msilo", "db_url", DBURL)
modparam("msilo", "add_date", 0)
modparam("msilo", "use_contact", 0)
modparam("msilo", "offline_message", "*** User $rU is offline!")
modparam("msilo", "content_type_hdr", "Content-Type: text/plain\r\n")
# modparam("msilo", "content_type_hdr", "Content-Type: application/json\r\n")
modparam("msilo", "max_messages", 100)
#modparam("msilo", "expire_time", 36000)
modparam("msilo", "check_time", 60)
modparam("msilo", "clean_period", 1)
modparam("msilo", "extra_hdrs_avp", "$avp(msilo_extra_hdrs)")
modparam("msilo", "outbound_proxy", OUTBOUND_PROXY)

# modparam("debugger", "mod_hash_size", 5)
# modparam("debugger", "mod_level_mode", 1)
# modparam("debugger", "mod_level", "msilo=4")


####### Routing Logic #######
request_route {

	# per request initial checks
	route(REQINIT);

	xlog("L_INFO", "new SIP msg received from $si ($fu => $ru => $tu) $rm $rb\n");

	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for requests from a WebSocket
		# connection - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		force_rport();
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if (!add_contact_alias()) {
				xlog("L_ERR", "Error aliasing contact <$ct>\n");
				sl_send_reply("400", "Bad Request");
				exit;
			}
		}
	}

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	# authentication
	route(AUTH);

	# irc
	route(IRC);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

	# dispatch requests to foreign domains
	route(SIPOUT);

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations to PSTN
	route(PSTN);

	# user location service
	route(LOCATION);
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[FORWARD]
{
	# send it out now; use stateful forwarding as it works reliably
	# even for UDP2TCP
	if (!t_relay()) {
		sl_reply_error();
	}

	drop;
}

# Per SIP request initial checks
route[REQINIT] {
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

}

# Handle requests within SIP dialogs
route[WITHINDLG] {

	#xlog("L_WARN", "##### ROUTE WITHINDLG\n");

	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {

		xlog("L_INFO", "## LOOSE ROUTE");

		if ($du == "") {
			if (!handle_ruri_alias()) {
				xlog("L_ERR", "Bad alias <$ru>\n");
				sl_send_reply("400", "Bad Request");
				exit;
			}
		}

		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;

	xlog("L_INFO", "# REGISTRAR: $tU\n");

	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
	}

	fix_nated_contact();

	$var(save_result) = save("location");

	if ($var(save_result) <= -1) {
		sl_reply_error();
	}
	else if ($var(save_result) == 1) {
		route(JOIN);
	}

	exit;
}

# User location service
route[LOCATION] {

	if (!lookup("location")) {

		if (is_method("MESSAGE")) {

			if (!($fU =~ "chat-") || !($rb =~ "\*\*\* ")) {

				if ($hdr(X-push) == "1") {

					remove_hf_re("^X-");

					if (m_store("$ru")) {
						xlog("L_INFO", "MSILO: offline message stored\n");
					}
					else {
						xlog("L_INFO", "MSILO: skip store message => $rb\n");
					}
				}
			}

			exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}

route[JOIN] {

	xlog("L_INFO", "JOIN\n");

	if (m_dump("$fu")) {
		xlog("L_INFO", "MSILO: offline messages dumped - if they were\n");
	}

	return;
}


# Presence server processing
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;

	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		route(TOVOICEMAIL);
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}

	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		fix_nated_contact();
		handle_subscribe();
		t_release();
	}

	exit;
}

# IP authorization and user authentication
route[AUTH] {
	return;
}

# Caller NAT detection
route[NATDETECT] {
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
	return;
}

# URI update for dialog requests
route[DLGURI] {
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	return;
}

# PSTN GW routing
route[PSTN] {
	return;
}


# Routing to voicemail server
route[TOVOICEMAIL] {
	return;
}

route[IRC] {
	if(is_method("MESSAGE") && (uri=~ "sip:chat-[0-9a-zA-Z_-]+@"))
	{
		xlog("L_INFO", "Handling IRC request\n");

		if(irc_manager())
			sl_send_reply("200", "ok");
		else
			sl_send_reply("500", "command error");
		exit;
	}
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) exit;
}

onreply_route {

	xlog("L_INFO", "#### REPLY $rs $rr $tu $fu\n");

	if ((($Rp == WS_PORT || $Rp == WSS_PORT)
		&& !(proto == WS || proto == WSS)) && !($tU =~ "^[1-9]{3}") ) {
		xlog("L_WARN", "SIP response received on $Rp\n");

		# drop;
	}

	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for replies to a WebSocket connection
		# - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		add_contact_alias();
	}
}

event_route[xhttp:request] {
	xlog("L_DBG", "WEB SOCKET HTTP Request Received\n");

	set_reply_close();
	set_reply_no_connect();
	
	if ($Rp != WS_PORT
#!ifdef WITH_TLS
		&& $Rp != WSS_PORT
#!endif
	) {
		xlog("L_WARN", "HTTP request received on $Rp\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	xlog("L_DBG", "HTTP Request Received\n");

	if ($hdr(Upgrade)=~"websocket"
			&& $hdr(Connection)=~"Upgrade"
			&& $rm=~"GET") {

		# Optional... perform HTTP authentication

		# ws_handle_handshake() exits (no further configuration file
		# processing of the request) when complete.
		if (ws_handle_handshake())
		{
			# Optional... cache some information about the
			# successful connection
			exit;
		}
	}

	xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
